facet_wrap(~DatasetID, scales = "free")
proxy_clim_data
## Plot the data
ggplot(model_dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
library(naniar)
## Plot the data
ggplot(model_dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
all_years <- min(meta_data$min_year):max(meta_data$max_year)
## Scale the proxy data
data_scale <- proxy_clim_data %>%
arrange(DatasetID,Year) %>%
group_by(DatasetID) %>%
mutate(proxy_scale = (proxy_value - mean(proxy_value,na.rm = TRUE))/sd(proxy_value, na.rm = TRUE)) %>%
mutate(clim_scale = (clim_value - mean(clim_value,na.rm = TRUE))/sd(clim_value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(year_ind = match(Year,all_years))
## filter out the NAs
data_scale_filter <- data_scale %>%
filter(!is.na(proxy_value))
## get climate data for the calibration period
data_calib <- indicator_data %>%
mutate(clim_scale = (value - mean(value))/sd(value)) %>%
filter(Year <= max(year_dat$max_year))
## get climate data for the calibration period
data_calib <- indicator_data %>%
mutate(clim_scale = (value - mean(value))/sd(value)) %>%
filter(Year <= max(meta_data$max_year))
## get no. of reconstruction years
n_recon <-  data_scale %>%
filter(is.na(clim_scale)) %>%
group_by(DatasetID) %>%
summarise(n = n()) %>%
pull(n) %>% max
## bget number of proxies used
n_proxys <- nrow(year_dat)
indicator_data
max(meta_data$max_year)
proxy_clim_data
devtools::load_all()
model_dat <- get_proxy_clim_data(catchment_num = catchment_num,
climate_num = climate_num)
## plot the data, incl missing values
ggplot(model_dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
## get model data
get_jags_data(proxy_clim_data = model_dat$proxy_clim_data,
indicator_data = model_dat$indicator_data,
meta_data = model_dat$meta_data)
## get model data
jags_data <- get_jags_data(proxy_clim_data = model_dat$proxy_clim_data,
indicator_data = model_dat$indicator_data,
meta_data = model_dat$meta_data)
## get model data
jags_data <- get_jags_data(proxy_clim_data = model_dat$proxy_clim_data,
indicator_data = model_dat$indicator_data,
meta_data = model_dat$meta_data)
devtools::load_all()
## Load libraries
library(tidyverse)
library(naniar)
library(rjags)
library(R2jags)
## Read in data files
catchments <- readRDS("data/catchments.rds")
climate_indices <- readRDS("data/climate_indices.rds")
## Choose a catchment and climate index
catchment_num <- 1
catchments[catchment_num]
climate_num <- 1
climate_indices[climate_num]
model_dat <- get_proxy_clim_data(catchment_num = catchment_num,
climate_num = climate_num)
## plot the data, incl missing values
ggplot(model_dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
## get model data
jags_data <- get_jags_data(proxy_clim_data = model_dat$proxy_clim_data,
indicator_data = model_dat$indicator_data,
meta_data = model_dat$meta_data)
dat <- get_proxy_clim_data(catchment_num = catchment_num,
climate_num = climate_num)
## plot the data, incl missing values
ggplot(dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
## get model data
model_data <- get_jags_data(proxy_clim_data = dat$proxy_clim_data,
indicator_data = dat$indicator_data,
meta_data = dat$meta_data)
run_jags_model(jags_data = model_data$jags_data,
data_calib = model_data$data_calib)
mod <- run_jags_model(jags_data = model_data$jags_data,
data_calib = model_data$data_calib)
mod$res
devtools::load_all()
mod <- run_jags_model(jags_data = model_data$jags_data,
data_calib = model_data$data_calib)
mod$res
## Plot results
p_recon <- ggplot(mod$res, aes(x= year, y = climate_variable_recon))+
geom_line(colour = "red",alpha = 0.7)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.5)+
theme_bw()+
xlab("Year")
p_recon
## Load all functions
devtools::load_all()
## Load libraries
library(tidyverse)
library(naniar)
library(rjags)
library(R2jags)
## Read in data files
catchments <- readRDS("data/catchments.rds")
climate_indices <- readRDS("data/climate_indices.rds")
## Choose a catchment and climate index
catchment_num <- 1
catchments[catchment_num]
climate_num <- 1
climate_indices[climate_num]
dat <- get_proxy_clim_data(catchment_num = catchment_num,
climate_num = climate_num)
## plot the data, incl missing values
ggplot(dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
## get model data
model_data <- get_jags_data(proxy_clim_data = dat$proxy_clim_data,
indicator_data = dat$indicator_data,
meta_data = dat$meta_data)
## get_jags_data() will format the data for running the model
model_data <- get_jags_data(proxy_clim_data = dat$proxy_clim_data,
indicator_data = dat$indicator_data,
meta_data = dat$meta_data)
## run_jags_model() will run the model and return results
mod <- run_jags_model(jags_data = model_data$jags_data,
data_calib = model_data$data_calib)
meta_data = dat$meta_data
indicator_data = dat$indicator_data
proxy_clim_data = dat$proxy_clim_data
all_years <- min(meta_data$min_year):max(meta_data$max_year)
all_years
## Scale the proxy data
data_scale <- proxy_clim_data %>%
arrange(DatasetID,Year) %>%
group_by(DatasetID) %>%
mutate(proxy_scale = (proxy_value - mean(proxy_value,na.rm = TRUE))/sd(proxy_value, na.rm = TRUE)) %>%
mutate(clim_scale = (clim_value - mean(clim_value,na.rm = TRUE))/sd(clim_value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(year_ind = match(Year,all_years))
data_scale$Year
## Load all functions
devtools::load_all()
install.packages("devtools")
install.packages("devtools")
install.packages("test_that")
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
install.packages(testthat)
install.packages("testthat")
## Load libraries
library(tidyverse)
library(naniar)
library(rjags)
library(R2jags)
library(devtools)
## Load all functions
load_all()
## Read in data files
catchments <- readRDS("data/catchments.rds")
climate_indices <- readRDS("data/climate_indices.rds")
## Choose a catchment and climate index
catchment_num <- 1
catchments[catchment_num]
climate_num <- 1
climate_indices[climate_num]
dat <- get_proxy_clim_data(catchment_num = catchment_num,
climate_num = climate_num)
## plot the data, incl missing values
ggplot(dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
## get_jags_data() will format the data for running the model
model_data <- get_jags_data(proxy_clim_data = dat$proxy_clim_data,
indicator_data = dat$indicator_data,
meta_data = dat$meta_data)
## run_jags_model() will run the model and return results
mod <- run_jags_model(jags_data = model_data$jags_data,
data_calib = model_data$data_calib)
## Load all functions
load_all()
## Load all functions
load_all()
## Load libraries
library(tidyverse)
library(naniar)
library(rjags)
library(R2jags)
library(devtools)
## Load all functions
load_all()
## Read in data files
catchments <- readRDS("data/catchments.rds")
climate_indices <- readRDS("data/climate_indices.rds")
## Choose a catchment and climate index
catchment_num <- 1
catchments[catchment_num]
climate_num <- 1
climate_indices[climate_num]
dat <- get_proxy_clim_data(catchment_num = catchment_num,
climate_num = climate_num)
## plot the data, incl missing values
ggplot(dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
## get_jags_data() will format the data for running the model
model_data <- get_jags_data(proxy_clim_data = dat$proxy_clim_data,
indicator_data = dat$indicator_data,
meta_data = dat$meta_data)
## run_jags_model() will run the model and return results
mod <- run_jags_model(jags_data = model_data$jags_data,
data_calib = model_data$data_calib,
all_years = model_data$all_years)
mod$res
## Plot results
p_recon <- ggplot(mod$res, aes(x= year, y = climate_variable_recon))+
geom_line(colour = "red",alpha = 0.7)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.5)+
theme_bw()+
xlab("Year")
p_recon
## Choose a catchment and climate index
catchment_num <- 1
catchments[catchment_num]
climate_num <- 3
climate_indices[climate_num]
## get_proxy_clim() will return the proxy and climate data needed for the model
## It will be based on the catchment and climate index choice
## It will also return some meta data related to Dataset IDs, recon years etc
dat <- get_proxy_clim_data(catchment_num = catchment_num,
climate_num = climate_num)
## plot the data, incl missing values
ggplot(dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
# Model -------------------------------------------------------------------
## get_jags_data() will format the data for running the model
model_data <- get_jags_data(proxy_clim_data = dat$proxy_clim_data,
indicator_data = dat$indicator_data,
meta_data = dat$meta_data)
## run_jags_model() will run the model and return results
mod <- run_jags_model(jags_data = model_data$jags_data,
data_calib = model_data$data_calib,
all_years = model_data$all_years)
mod$res
## Plot results
p_recon <- ggplot(mod$res, aes(x= year, y = climate_variable_recon))+
geom_line(colour = "red",alpha = 0.7)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.5)+
theme_bw()+
xlab("Year")
p_recon
## Load libraries
library(tidyverse)
library(naniar)
library(rjags)
library(R2jags)
library(devtools)
## Load all functions
load_all()
## Read in data files
catchments <- readRDS("data/catchments.rds")
climate_indices <- readRDS("data/climate_indices.rds")
## Choose a catchment and climate index
catchment_num <- 1
catchments[catchment_num]
climate_num <- 3
climate_indices[climate_num]
## get_proxy_clim() will return the proxy and climate data needed for the model
## It will be based on the catchment and climate index choice
## It will also return some meta data related to Dataset IDs, recon years etc
dat <- get_proxy_clim_data(catchment_num = catchment_num,
climate_num = climate_num)
## plot the data, incl missing values
ggplot(dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
# Model -------------------------------------------------------------------
## get_jags_data() will format the data for running the model
model_data <- get_jags_data(proxy_clim_data = dat$proxy_clim_data,
indicator_data = dat$indicator_data,
meta_data = dat$meta_data)
## run_jags_model() will run the model and return results
mod <- run_jags_model(jags_data = model_data$jags_data,
data_calib = model_data$data_calib,
all_years = model_data$all_years)
mod$res
## Plot results
p_recon <- ggplot(mod$res, aes(x= year, y = climate_variable_recon))+
geom_line(colour = "red",alpha = 0.7)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.5)+
theme_bw()+
xlab("Year")
p_recon
proxy_data <- read_csv("data/proxy_dataset.csv")
proxy_data$DatasetID <- paste0("Dataset_",proxy_data$DatasetID)
climate_dataset <- read_csv("data/combined_catchment_data.csv")
catchments <- readRDS("data/catchments.rds")
climate_indices <- readRDS("data/climate_indices.rds")
library(readr)
selection_long_filtered <- read_csv("data/selection_long_filtered.csv")
View(selection_long_filtered)
proxy_dataset <- read_csv("data/proxy_dataset.csv")
proxy_dataset$DatasetID <- paste0("Dataset_",proxy_dataset$DatasetID)
combined_catchment_data <- read_csv("data/combined_catchment_data.csv")
selection_long <- read_csv("data/selection_long_filtered.csv")
catchments <- selection_long$catchment %>% unique()
climate_indices <- selection_long$climate_index %>% unique()
saveRDS(catchments, "data/catchments.rds")
saveRDS(climate_indices, "data/climate_indices.rds")
N <- length(catchments)
M <- length(climate_indices)
climate_index_list <- list()
catchment_climate_list_orig <- list()
for(i in 1:N)
{
for(j in 1:M)
{
data_index <- selection_long %>% filter(catchment == catchments[i]) %>%
filter(climate_index == climate_indices[j]) %>%
pull(DatasetID)
climate_index_list[[j]] <- data_index
}
climate_index_list <- lapply(climate_index_list, function(x) if(identical(x, character(0))) NA_character_ else x)
catchment_climate_list_orig[[i]] <- climate_index_list
}
saveRDS(catchment_climate_list_orig, "data/catchment_climate_list.rds")
## Load all functions
load_all()
## get proxy data ids based on the catchment and climate index choice
get_proxy_id(catchment_num = 1,
climate_num = 3)
## Load all functions
load_all()
## get proxy data ids based on the catchment and climate index choice
get_proxy_id(catchment_num = 1,
climate_num = 3)
## get proxy data ids based on the catchment and climate index choice
get_proxy_id(catchment_num = 1,
climate_num = 1)
## get proxy data ids based on the catchment and climate index choice
proxy_id <- get_proxy_id(catchment_num = 1,
climate_num = 1)
proxy_id
## Load all functions
load_all()
## get proxy data ids based on the catchment and climate index choice
id <- get_id(catchment_num = 1, # choose from no. 1 to 18
climate_num = 1) # choose from no. 1 to 13
id
dat <- get_proxy_clim_data(catchment = id$catchment,
climate_index = id$climate_index,
proxy_id = id$proxy_id)
glimpse(dat)
dat
dat$meta_data
## Load all functions
load_all()
## get proxy data ids based on the catchment and climate index choice
id <- get_id(catchment_num = 1, # choose from no. 1 to 18
climate_num = 1) # choose from no. 1 to 13
id
dat <- get_proxy_clim_data(catchment = id$catchment,
climate_index = id$climate_index,
proxy_id = id$proxy_id)
## check the meta data
dat$meta_data
## plot the data, incl missing values
ggplot(dat$proxy_clim_data, aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
id
## plot the data, incl missing values
ggplot(dat$proxy_clim_data %>% filter(!is.na(proxy_value)), aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
## get_jags_data() will format the data for running the model
model_data <- get_jags_data(proxy_clim_data = dat$proxy_clim_data,
indicator_data = dat$indicator_data,
meta_data = dat$meta_data)
model_data
## run_jags_model() will run the model and return results
mod <- run_jags_model(jags_data = model_data$jags_data,
data_calib = model_data$data_calib,
all_years = model_data$all_years)
mod$res
## Plot results
p_recon <- ggplot(mod$res, aes(x= year, y = climate_variable_recon))+
geom_line(colour = "red",alpha = 0.7)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.5)+
theme_bw()+
xlab("Year")
p_recon
## Load libraries
library(tidyverse)
library(naniar)
library(rjags)
library(R2jags)
library(devtools)
## Load all functions
load_all()
## get proxy data ids based on the catchment and climate index choice
id <- get_id(catchment_num = 1, # choose from no. 1 to 18
climate_num = 1) # choose from no. 1 to 13
id
dat <- get_proxy_clim_data(catchment = id$catchment,
climate_index = id$climate_index,
proxy_id = id$proxy_id)
## check the meta data
dat$meta_data
## plot the data, incl missing values
ggplot(dat$proxy_clim_data %>% filter(!is.na(proxy_value)), aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
# Model -------------------------------------------------------------------
## run_jags_model() will run the model and return results
mod <- run_jags_model(dat)
## Load all functions
load_all()
## get proxy data ids based on the catchment and climate index choice
id <- get_id(catchment_num = 1, # choose from no. 1 to 18
climate_num = 1) # choose from no. 1 to 13
id
dat <- get_proxy_clim_data(catchment = id$catchment,
climate_index = id$climate_index,
proxy_id = id$proxy_id)
## check the meta data
dat$meta_data
## plot the data, incl missing values
ggplot(dat$proxy_clim_data %>% filter(!is.na(proxy_value)), aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
# Model -------------------------------------------------------------------
## run_jags_model() will run the model and return results
mod <- run_jags_model(dat)
## get_jags_data() will format the data for running the model
jags_data <- get_jags_data(proxy_clim_data = dat$proxy_clim_data,
indicator_data = dat$indicator_data,
meta_data = dat$meta_data)
jags_data
## get_jags_data() will format the data for running the model
model_data <- get_jags_data(proxy_clim_data = dat$proxy_clim_data,
indicator_data = dat$indicator_data,
meta_data = dat$meta_data)
model_data$all_years
model_data$data_calib$value
## Load all functions
load_all()
## get proxy data ids based on the catchment and climate index choice
id <- get_id(catchment_num = 1, # choose from no. 1 to 18
climate_num = 1) # choose from no. 1 to 13
id
dat <- get_proxy_clim_data(catchment = id$catchment,
climate_index = id$climate_index,
proxy_id = id$proxy_id)
## check the meta data
dat$meta_data
## plot the data, incl missing values
ggplot(dat$proxy_clim_data %>% filter(!is.na(proxy_value)), aes(x = clim_value, y = proxy_value)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ x + I(x^2)) +
geom_miss_point(jitter = 0.01) +
facet_wrap(~DatasetID, scales = "free")
# Model -------------------------------------------------------------------
## run_jags_model() will run the model and return results
mod <- run_jags_model(dat)
